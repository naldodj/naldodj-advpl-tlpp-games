/*
                                _  ____             _
  __ _   __ _  _ __ ___    ___ / || ___|    __   __(_)  ___ __      __
 / _` | / _` || '_ ` _ \  / _ \| ||___ \    \ \ / /| | / _ \\ \ /\ / /
| (_| || (_| || | | | | ||  __/| | ___) | _  \ V / | ||  __/ \ V  V /
 \__, | \__,_||_| |_| |_| \___||_||____/ (_)  \_/  |_| \___|  \_/\_/
 |___/

*/
#include "totvs.ch"
#include "game15.th"
#include "parmtype.ch"
#include "tlpp-core.th"

namespace game15
using namespace game15

class Game15View

    private data bInit as codeblock
    private data bValid as codeblock

    private data lActive as logical
    private data lExecute as logical
    private data lSetDeleted as logical

    public data aNotPlayButtonsActions as array

    public data oDlg as object
    public data oModel as object
    public data oTPaintPanel as object

    public method New(oModel as object) as object
    public method Activate() as logical
    public method DeActivate() as logical

    public method IsActive() as logical
    public method CanExecute() as logical

    public method SaveTopTable() as variant
    public method ShowTopTable() as variant
    public method ClearTopTable() as logical
    public method MsgAbout() as variant

    private method Create() as variant

endclass

method New(oModel) class Game15View
    paramtype 1 var oModel as object
    self:lActive:=.F.
    if (self:CanExecute())
        self:aNotPlayButtonsActions:=Array(0)
        self:lSetDeleted:=Set(_SET_DELETED,.T.)
        self:oModel:=oModel
    endif
return(self)

method Activate() class Game15View
    if (;
            (ValType(self:oModel)=="O");
            .and.;
            (self:oModel:IsActive());
            .and.;
            (!self:lActive).and.(self:CanExecute());
    )
        self:Create()
        self:lActive:=.T.
        self:oDlg:Activate(nil,nil,nil,.T.,self:bValid,nil,self:bInit,nil,nil)
    endif
return(self:lActive)

method DeActivate() class Game15View
    if (self:lActive)
        if (valType(self:oDlg)=="O")
            self:oDlg:End()
        endif
        FreeObj(@self:oTPaintPanel)
        FreeObj(@self:oDlg)
        FWFreeArray(@self:aNotPlayButtonsActions)
        DelClassIntf()
        self:lActive:=.F.
    endif
    Set(_SET_DELETED,self:lSetDeleted)
return(self:lActive)

method Create() class Game15View

    local bRestoreGameUpdateView as codeblock

    local cIcon as character
    local cTitle:="Jogo Game15::by Naldo DJ::v2" as character

    local jCoordinates as json

    local oView:=self as object
    local oModel:=self:oModel as object

    lSetDeleted:=Set(_SET_DELETED,.T.)

    begin sequence

        if (!oView:CanExecute())
            break
        endif

        bRestoreGameUpdateView:={|nID as numeric,nLeft as numeric,nTop as numeric|oView:oTPaintPanel:SetPosition(nID,nLeft,nTop)}

        aAdd(oView:aNotPlayButtonsActions,{"Close",{||oView:oTPaintPanel:ClearAll(),oView:oTPaintPanel:oWnd:End()}})
        aAdd(oView:aNotPlayButtonsActions,{"Load Game",{||RestoreGame(@oModel,@bRestoreGameUpdateView)}})
        aAdd(oView:aNotPlayButtonsActions,{"Start of new game",{||FWMsgRun(nil,{||oView:oTPaintPanel:ClearAll(),oModel:Reload(),LoadGame(nil,nil,@oModel,@oView:oTPaintPanel)},"Wait..","Start of new game")}})
        aAdd(oView:aNotPlayButtonsActions,{"Save a game",{||SaveGame(@oModel)}})
        aAdd(oView:aNotPlayButtonsActions,{"About",{||oView:MsgAbout()}})
        aAdd(oView:aNotPlayButtonsActions,{"Top Table",{||oView:ShowTopTable()}})
        aAdd(oView:aNotPlayButtonsActions,{"Exit",{||oView:oTPaintPanel:ClearAll(),oView:oTPaintPanel:oWnd:End()}})

        oTRect:=TRect():New(0,0,365,305)

        cIcon:=oModel:jGame15Data["Game15_Files_ico"]["ico"]
        DEFINE MSDIALOG oView:oDlg TITLE OemToAnsi(cTitle) FROM oTRect:nTop,oTRect:nLeft TO oTRect:nBottom,oTRect:nRight OF GetWndDefault() ICON cIcon PIXEL STYLE WS_POPUP

        jCoordinates:=oModel:jGame15Data["Coordinates"]
        jCoordinates["nTop"]:=oTRect:nTop
        jCoordinates["nLeft"]:=oTRect:nLeft
        jCoordinates["nWidth"]:=oTRect:nRight
        jCoordinates["nHeight"]:=oTRect:nBottom

        oView:oTPaintPanel:=TPaintPanel():New(jCoordinates["nTop"],jCoordinates["nLeft"],jCoordinates["nWidth"],jCoordinates["nHeight"],oView:oDlg,.F.)
        oView:oTPaintPanel:Align:=CONTROL_ALIGN_ALLCLIENT

        oView:oTPaintPanel:bRClicked:={|x,y|rClickGame15(@x,@y,@oView,@oModel)}
        oView:oTPaintPanel:blClicked:={|x,y|lClickGame15(@x,@y,@oView,@oModel)}
        oView:oTPaintPanel:blDBLClick:=oView:oTPaintPanel:blClicked

        FreeObj(@oTRect)

        oView:bInit:={||LoadGame(nil,nil,@oModel,@oView:oTPaintPanel)}
        oView:bValid:={||.T.}

    end sequence

return(nil)

method IsActive() class Game15View
return(self:lActive)

method CanExecute() class Game15View
    self:lExecute:=FWIsInCallStack("GAME15.U_GAME15RUN")
return(self:lExecute)

method SaveTopTable() class Game15View

    local cG15Name as character
    local cG15Alias as character

    local cElapTime as character
    local cStartTime as character

    local dStartDate as date

    local oView:=self as object
    local oModel:=self:oModel as object

    local oDlg as object
    local oBtn as object
    local oFont as object

    begin sequence

        if (!oView:CanExecute())
            break
        endif

        cG15Alias:=oModel:jGame15Data["Game15_Table"]["G15_Alias"]

        if (;
                Empty(cG15Alias);
                .or.;
                (Select(cG15Alias)==0);
        )
            break
        endif

        cStartTime:=oModel:jGame15Data["Game15_Time"]["cStartTime"]
        dStartDate:=oModel:jGame15Data["Game15_Time"]["dStartDate"]
        cStartTime:=oModel:Time2NextDay(@cStartTime,@dStartDate)[1]
        cElapTime:=ElapTime(cStartTime,Time())

        cG15Name:=Space(Len((cG15Alias)->G15_NAME))

        DEFINE FONT oFont NAME "Arial" SIZE 0,-15 BOLD
        DEFINE MSDIALOG oDlg TITLE OemToAnsi("You Win! Elapsed Time:"+cElapTime+". Enter your name.") FROM 0,0 TO 040,405 OF oView:oDlg PIXEL
            @ 05,02 GET oGet VAR cG15Name PICTURE "@!" OF oDlg SIZE 170,10 PIXEL FONT oFont
            DEFINE SBUTTON oBtn FROM 05,175 TYPE 1 ACTION oDlg:End() OF oDlg ENABLE
        ACTIVATE DIALOG oDlg CENTERED

        FreeObj(@oGet)
        FreeObj(@oBtn)
        FreeObj(@oDlg)
        FreeObj(@oFont)

        DelClassIntf()

        if (Empty(cG15Name))
            cG15Name:="NONAME"
        endif

        oModel:SetGame15Player(cG15Name)
        oModel:SaveTopTable()

    end sequence

return

method ShowTopTable() class Game15View

    local aShapes as array
    local aListBox as array

    local bInit as codeblock
    local bValid as codeblock

    local cIcon as character
    local cG15Alias as character

    local jCoordinates as json

    local oView:=self as object
    local oModel:=self:oModel as object

    local oDlg as object
    local oTRect as object
    local oTListBox as object
    local oTPaintPanel as object

    begin sequence

        if (!self:CanExecute())
            break
        endif

        cG15Alias:=oModel:jGame15Data["Game15_Table"]["G15_Alias"]

        if (;
                Empty(cG15Alias);
                .or.;
                (Select(cG15Alias)==0);
        )
            break
        endif

        oTRect:=TRect():New(0,0,365,305)

        aListBox:=Array(0)
        BuildLBoxArray(@cG15Alias,@aListBox)

        cIcon:=oModel:jGame15Data["Game15_Files_ico"]["ico"]
        DEFINE MSDIALOG oDlg TITLE OemToAnsi("TOP Results") FROM oTRect:nTop,oTRect:nLeft TO oTRect:nBottom,oTRect:nRight OF oView:oDlg ICON cIcon PIXEL STYLE WS_POPUP

            jCoordinates:=oModel:jGame15Data["Coordinates"]
            jCoordinates["nTop"]:=oTRect:nTop
            jCoordinates["nLeft"]:=oTRect:nLeft
            jCoordinates["nWidth"]:=oTRect:nRight
            jCoordinates["nHeight"]:=oTRect:nBottom

            oTPaintPanel:=TPaintPanel():New(jCoordinates["nTop"],jCoordinates["nLeft"],jCoordinates["nWidth"],jCoordinates["nHeight"],oDlg,.F.)
            oTPaintPanel:Align:=CONTROL_ALIGN_ALLCLIENT

            @ oTRect:nTop+20,oTRect:nLeft+5 LISTBOX oTListBox FIELDS HEADER "Time","Result","Name" SIZE oTRect:nRight/2.05,oTRect:nBottom/2.35 OF oTPaintPanel PIXEL COLSIZES 15,25,50
            oTListBox:SetArray(aListBox)
            oTListBox:bLine:={||(cG15Alias)->(MsGoto(aListBox[oTListBox:nAT][AT_R_E_C_N_O_])),;
                                    {;
                                        aListBox[oTListBox:nAT][AT_G15_TIME],;
                                        aListBox[oTListBox:nAT][AT_G15_RESULT],;
                                        aListBox[oTListBox:nAT][AT_G15_NAME];
                           };
                        }

            oTPaintPanel:bRClicked:={|x,y|rClickTopTable(@x,@y,@oView,@oTPaintPanel,@aShapes,@oTListBox,@aListBox,@cG15Alias)}
            oTPaintPanel:blClicked:={|x,y|lClickTopTable(@x,@y,@oView,@oTPaintPanel,@aShapes,@oTListBox,@aListBox,@cG15Alias)}
            oTPaintPanel:blDBLClick:=oTPaintPanel:blClicked

            FreeObj(@oTRect)

            bInit:={||LoadTopTable(@oTPaintPanel,@oModel,@aShapes)}
            bValid:={||.T.}

        ACTIVATE DIALOG oDlg CENTERED ON INIT Eval(bInit) VALID Eval(bValid)

        FWFreeArray(@aShapes)
        FWFreeArray(@aListBox)

        FreeObj(oTListBox)
        FreeObj(@oTPaintPanel)
        FreeObj(@oDlg)
        DelClassIntf()

    end sequence

return

method ClearTopTable() class Game15View

    local cG15Name as character
    local cG15Alias as character

    local lClear:=.F. as logical

    local oView:=self as object
    local oModel:=self:oModel as object

    local oDlg as object
    local oBtn as object
    local oFont as object

    begin sequence

        if (!valType(oModel:jGame15Data)=="J")
            break
        endif

        if (;
                (!oModel:jGame15Data:HasProperty("Game15_Table"));
                .or.;
                (!oModel:jGame15Data["Game15_Table"]:HasProperty("G15_Alias"));
        )
            break
        endif

        cG15Alias:=oModel:jGame15Data["Game15_Table"]["G15_Alias"]

        if (;
                Empty(cG15Alias);
                .or.;
                (Select(cG15Alias)==0);
        )
            break
        endif

        cG15Name:=Space(Len((cG15Alias)->G15_NAME))

        DEFINE FONT oFont NAME "Arial" SIZE 0,-15 BOLD
        DEFINE MSDIALOG oDlg TITLE OemToAnsi("Enter your name.") FROM 0,0 TO 040,405 OF oView:oDlg PIXEL
            @ 05,02 GET oGet VAR cG15Name PICTURE "@!" OF oDlg SIZE 170,10 PIXEL FONT oFont
            DEFINE SBUTTON oBtn FROM 05,175 TYPE 1 ACTION oDlg:End() OF oDlg ENABLE
        ACTIVATE DIALOG oDlg CENTERED

        FreeObj(@oGet)
        FreeObj(@oBtn)
        FreeObj(@oDlg)
        FreeObj(@oFont)

        DelClassIntf()

        if (Empty(cG15Name))
            cG15Name:="NONAME"
        endif

        oModel:jGame15Data["Game15_Player"]["cGame15Player"]:=cG15Name
        lClear:=oModel:ClearTopTable()

    end sequence

return(lClear)

static procedure LoadGame(x as variant,y as variant,oModel as object,oTPaintPanel as object)

    local aShapes as array

    local cProperties as character

    local lCanMove:=.F. as logical
    local lCanDeform:=.F. as logical

    local nShape
    local nShapes

    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)

    oTPaintPanel:ClearAll()

    aShapes:=aClone(oModel:jGame15Data["Game15_Shapes"]["aShapes"])
    nShapes:=Len(aShapes)
    for nShape:=1 to nShapes
        cProperties:=aShapes[nShape][SHAPE_PROPERTIES]
        oTPaintPanel:AddShape(cProperties)
        oTPaintPanel:SetCanMove(aShapes[nShape][SHAPE_ID],lCanMove)
        oTPaintPanel:SetCanDeform(aShapes[nShape][SHAPE_ID],lCanDeform)
    next nShape

    FWFreeArray(@aShapes)

return

static function rClickGame15(x as variant,y as variant,oTPaintPanel as object,oModel as object) as logical
    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)
    SYMBOL_UNUSED(oTPaintPanel)
    SYMBOL_UNUSED(oModel)
return(.T.)

static function lClickGame15(x as variant,y as variant,oView as object,oModel as object) as logical

    local aShapes as array

    local bShapeAction as codeblock

    local lAction as logical

    local nShape as numeric
    local nATShape as numeric
    local nATNoPlayButton as numeric

    begin sequence

        nShape:=oView:oTPaintPanel:ShapeAtu
        oModel:jGame15Data["Game15_Shapes"]["nShapeAtu"]:=nShape
        aShapes:=aClone(oModel:jGame15Data["Game15_Shapes"]["aShapes"])

        nATShape:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)},nShape)
        lAction:=(nATShape>0)

        if (!lAction)
            nATShape:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)})
            lAction:=(nATShape>0)
        endif

        if (!lAction)
            break
        endif

        bShapeAction:=aShapes[nATShape][SHAPE_ACTION]
        lAction:=(ValType(bShapeAction)=="B")

        if (!lAction)
            break
        endif

        nATNoPlayButton:=aScan(oView:aNotPlayButtonsActions,{|x|x[1]==aShapes[nATShape][SHAPE_TOOLTIP]})
        if (nATNoPlayButton>0)
            Eval(oView:aNotPlayButtonsActions[nATNoPlayButton][2])
            break
        endif

        lICanMove:=ICanMove(x,y,aShapes[nATShape])
        if (!lICanMove)
            break
        endif

        bUpdateView:={;
            |;
                 nIDPress as numeric;
                ,nLeftPress as numeric;
                ,nTopPress as numeric;
                ,nIDFree as numeric;
                ,nLeftFree as numeric;
                ,nTopFree as numeric;
            |;
                oView:oTPaintPanel:SetPosition(nIDPress,nLeftPress,nTopPress);
               ,oView:oTPaintPanel:SetPosition(nIDFree,nLeftFree,nTopFree);
               ,Tone(3000,1);
        }
        oModel:jGame15Data["Game15_Shapes"]["bUpdateView"]:=bUpdateView

        Eval(bShapeAction,{||if(oModel:SwapButtons(),oView:SaveTopTable(),nil)})

    end sequence

    FWFreeArray(@aShapes)

return(lAction)

static function ICanMove(x,y,aShape) as logical
    local cToolTip:=Left(aShape[SHAPE_TOOLTIP],3)
    local lICanMove:=("can-move=1"$aShape[SHAPE_PROPERTIES]) as logical
    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)
    lICanMove:=((lICanMove).and.(cToolTip>="b01".and.cToolTip<="b15"))
return(lICanMove)

static function rClickTopTable(x as variant,y as variant,oView as object,oTPaintPanel as object,aShapes as array,oTListBox as object,aListBox as array,cG15Alias as character) as logical
    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)
    SYMBOL_UNUSED(oView)
    SYMBOL_UNUSED(oTPaintPanel)
    SYMBOL_UNUSED(aShapes)
    SYMBOL_UNUSED(oTListBox)
    SYMBOL_UNUSED(aListBox)
    SYMBOL_UNUSED(cG15Alias)
return(.T.)

static function lClickTopTable(x as variant,y as variant,oView as object,oTPaintPanel as object,aShapes as array,oTListBox as object,aListBox as array,cG15Alias as character) as logical

    local aTopTableAction as array

    local lAction as logical

    local nShape as numeric
    local nATShape as numeric
    local nATTopTableAction as numeric

    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)

    begin sequence

        nShape:=oTPaintPanel:ShapeAtu
        nATShape:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)},nShape)
        lAction:=(nATShape>0)

        if (!lAction)
            nATShape:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)})
            lAction:=(nATShape>0)
        endif

        if (!lAction)
            break
        endif

        aTopTableAction:=Array(0)
        aAdd(aTopTableAction,{"Close",{||oTPaintPanel:ClearAll(),oTPaintPanel:oWnd:End()}})
        aAdd(aTopTableAction,{"OK",{||oTPaintPanel:ClearAll(),oTPaintPanel:oWnd:End()}})
        aAdd(aTopTableAction,{"Clear Top Table",{||oView:ClearTopTable(),BuildLBoxArray(@cG15Alias,@aListBox),oTListBox:Refresh()}})

        nATTopTableAction:=aScan(aTopTableAction,{|x|x[1]==aShapes[nATShape][SHAPE_TOOLTIP]})
        if (nATTopTableAction>0)
            Eval(aTopTableAction[nATTopTableAction][2])
        endif

        FWFreeArray(@aTopTableAction)

    end sequence

return(lAction)

static procedure BuildLBoxArray(cG15Alias,aListBox)

    local cNickName:=(cG15Alias)->(IndexKey())

    local nListBox:=0

    local lBuildOk

    (cG15Alias)->(dbOrderNickName("G15_TIME"))

    aSize(aListBox,0)

    (cG15Alias)->(dbGoTop())

    While (cG15Alias)->(.NOT.(Eof()))

        ++nListBox
        aAdd(aListBox,Array(AT_FIELDS))

        aListBox[nListBox][AT_G15_TIME ]:=(cG15Alias)->G15_TIME
        aListBox[nListBox][AT_G15_RESULT]:=(cG15Alias)->G15_RESULT
        aListBox[nListBox][AT_G15_NAME ]:=(cG15Alias)->G15_NAME
        aListBox[nListBox][AT_R_E_C_N_O_]:=(cG15Alias)->(Recno())

        (cG15Alias)->(dbSkip())

    End While

    lBuildOk:=(nListBox>0)

    if .NOT.(lBuildOk)

        ++nListBox
        aAdd(aListBox,Array(AT_FIELDS))
        aListBox[nListBox][AT_G15_TIME ]:=Space(Len((cG15Alias)->G15_TIME))
        aListBox[nListBox][AT_G15_RESULT]:=Space(10)
        aListBox[nListBox][AT_G15_NAME ]:=Space(Len((cG15Alias)->G15_NAME))
        aListBox[nListBox][AT_R_E_C_N_O_]:=0

    endif

    (cG15Alias)->(dbOrderNickName(cNickName))

return(lBuildOk)

static procedure LoadTopTable(oTPaintPanel as object,oModel as object,aShapes as array)

    local cProperties as character

    local lCanMove:=.F. as logical
    local lCanDeform:=.F. as logical

    local nShape as numeric
    local nShapes as numeric

    oTPaintPanel:ClearAll()

    aShapes:=aClone(oModel:jGame15Data["Game15_TopTable"]["aShapes"])
    nShapes:=Len(aShapes)
    for nShape:=1 to nShapes
        cProperties:=aShapes[nShape][SHAPE_PROPERTIES]
        oTPaintPanel:AddShape(cProperties)
        oTPaintPanel:SetCanMove(aShapes[nShape][SHAPE_ID],lCanMove)
        oTPaintPanel:SetCanDeform(aShapes[nShape][SHAPE_ID],lCanDeform)
    next nShape

return

method MsgAbout() class Game15View

    local aShapes as array

    local bInit as codeblock
    local bValid as codeblock

    local cIcon as character

    local jCoordinates as json

    local oView:=self as object
    local oModel:=self:oModel as object

    local oDlg as object
    local oTRect as object
    local oTPaintPanel as object

    begin sequence

        if (!self:CanExecute())
            break
        endif

        oTRect:=TRect():New(0,0,365,305)

        cIcon:=oModel:jGame15Data["Game15_About"]["ico"]
        DEFINE MSDIALOG oDlg TITLE OemToAnsi(PROGRAM+" About") FROM oTRect:nTop,oTRect:nLeft TO oTRect:nBottom,oTRect:nRight OF oView:oDlg ICON cIcon PIXEL STYLE WS_POPUP

            jCoordinates:=oModel:jGame15Data["Coordinates"]
            jCoordinates["nTop"]:=oTRect:nTop
            jCoordinates["nLeft"]:=oTRect:nLeft
            jCoordinates["nWidth"]:=oTRect:nRight
            jCoordinates["nHeight"]:=oTRect:nBottom

            oTPaintPanel:=TPaintPanel():New(jCoordinates["nTop"],jCoordinates["nLeft"],jCoordinates["nWidth"],jCoordinates["nHeight"],oDlg,.F.)
            oTPaintPanel:Align:=CONTROL_ALIGN_ALLCLIENT

            LoadMsgAbout(@oTPaintPanel,oModel,@aShapes)

            oTPaintPanel:bRClicked:={|x,y|rClickMsgAbout(@x,@y,@oTPaintPanel,@aShapes)}
            oTPaintPanel:blClicked:={|x,y|lClickMsgAbout(@x,@y,@oTPaintPanel,@aShapes)}
            oTPaintPanel:blDBLClick:=oTPaintPanel:blClicked

            FreeObj(@oTRect)

            bInit:={||.T.}
            bValid:={||.T.}

        ACTIVATE DIALOG oDlg CENTERED ON INIT Eval(bInit) VALID Eval(bValid)

        FWFreeArray(@aShapes)

        FreeObj(@oTPaintPanel)
        FreeObj(@oDlg)
        DelClassIntf()

    end sequence

return

static procedure LoadMsgAbout(oTPaintPanel as object,oModel as object,aShapes as array)

    local cProperties as character

    local lCanMove:=.F. as logical
    local lCanDeform:=.F. as logical

    local nShape as numeric
    local nShapes as numeric

    oTPaintPanel:ClearAll()

    aShapes:=aClone(oModel:jGame15Data["Game15_About"]["aShapes"])
    nShapes:=Len(aShapes)
    for nShape:=1 to nShapes
        cProperties:=aShapes[nShape][SHAPE_PROPERTIES]
        oTPaintPanel:AddShape(cProperties)
        oTPaintPanel:SetCanMove(aShapes[nShape][SHAPE_ID],lCanMove)
        oTPaintPanel:SetCanDeform(aShapes[nShape][SHAPE_ID],lCanDeform)
    next nShape

return

static function rClickMsgAbout(x as variant,y as variant,oTPaintPanel as object,aShapes as array) as logical
    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)
    SYMBOL_UNUSED(oTPaintPanel)
    SYMBOL_UNUSED(aShapes)
return(.T.)

static function lClickMsgAbout(x as variant,y as variant,oTPaintPanel as object,aShapes as array) as logical

    local aMsgAboutAction as array

    local lAction as logical

    local nShape as numeric
    local nATShape as numeric
    local nATMsgAboutAction as numeric

    SYMBOL_UNUSED(x)
    SYMBOL_UNUSED(y)

    begin sequence

        nShape:=oTPaintPanel:ShapeAtu
        nATShape:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)},nShape)
        lAction:=(nATShape>0)

        if (!lAction)
            nATShape:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)})
            lAction:=(nATShape>0)
        endif

        if (!lAction)
            break
        endif

        aMsgAboutAction:=Array(0)
        aAdd(aMsgAboutAction,{"Close",{||oTPaintPanel:ClearAll(),oTPaintPanel:oWnd:End()}})
        aAdd(aMsgAboutAction,{PadC("BlackTDN::ADVPL Games ~ GAME 15",40),{||ShellExecute("open",URL_BTDNGAME15,"","",1)}})
        aAdd(aMsgAboutAction,{PadC(URL_COPYRIGHT,40),{||ShellExecute("open",URL_COPYRIGHT,"","",1)}})
        aAdd(aMsgAboutAction,{"OK",{||oTPaintPanel:ClearAll(),oTPaintPanel:oWnd:End()}})

        nATMsgAboutAction:=aScan(aMsgAboutAction,{|x|x[1]==aShapes[nATShape][SHAPE_TOOLTIP]})
        if (nATMsgAboutAction>0)
            Eval(aMsgAboutAction[nATMsgAboutAction][2])
        endif

        FWFreeArray(@aMsgAboutAction)

    end sequence

return(lAction)

static procedure SaveGame(oModel as object)

    local cG15File as character
    local cMGFile as character

    local ncGFile as numeric

    begin sequence

        ncGFile:=nOr(GETF_LOCALFLOPPY,GETF_LOCALHARD,GETF_NETWORKDRIVE,GETF_SHAREAWARE)
        cMGFile:="G15FileSave (g15_*.sav)|g15_*.sav"
        cG15File:=cGetFile(cMGFile,"Save Game",NIL,GetTempPath(),.T.,ncGFile,.T.,.T.)

        if (Empty(cG15File))
            break
        endif

        if (oModel:SaveGame(cG15File))
            ApMsgInfo("Arquivo ["+cG15File+".sav] salvo com sucesso",ProcName())
        else
            ApMsgInfo("Ocorreram problemas para salvar o Arquivo ["+cG15File+".sav]",ProcName())
        endif

    end sequence

return

static procedure RestoreGame(oModel as object,bUpdateView as codeblock)

    local cG15File as character
    local cMGFile as character

    local ncGFile as character

    begin sequence

        ncGFile:=nOr(GETF_LOCALFLOPPY,GETF_LOCALHARD,GETF_NETWORKDRIVE,GETF_SHAREAWARE)
        cMGFile:="G15FileSave (g15_*.sav)|g15_*.sav"
        cG15File:=cGetFile(cMGFile,"Restore Game",NIL,GetTempPath(),.F.,ncGFile,.T.,.T.)

        if (Empty(cG15File))
            break
        endif

        if (oModel:RestoreGame(@cG15File,@bUpdateView))
            ApMsgInfo("Arquivo ["+cG15File+"] restaurado com sucesso",ProcName())
        else
            ApMsgInfo("Ocorreram problemas para restaurar o Arquivo ["+cG15File+"]",ProcName())
        endif

    end sequence

return
