/*
                                _  ____                          _                 _  _
  __ _   __ _  _ __ ___    ___ / || ___|      ___   ___   _ __  | |_  _ __   ___  | || |  ___  _ __
 / _` | / _` || '_ ` _ \  / _ \| ||___ \     / __| / _ \ | '_ \ | __|| '__| / _ \ | || | / _ \| '__|
| (_| || (_| || | | | | ||  __/| | ___) | _ | (__ | (_) || | | || |_ | |   | (_) || || ||  __/| |
 \__, | \__,_||_| |_| |_| \___||_||____/ (_) \___| \___/ |_| |_| \__||_|    \___/ |_||_| \___||_|
 |___/

*/
#include "totvs.ch"
#include "game15.th"
#include "parmtype.ch"
#include "tlpp-core.th"

namespace game15
using namespace game15

class Game15Controller

    private data lExecute as logical
    private data lActive as logical
    private data lSetDeleted as logical

    private data oView as object
    private data oModel as object

    public method New() as object
    public method Activate() as logical
    public method DeActivate() as logical
    public method CanExecute() as logical
    public method IsActive() as logical

    //Model Interface
    private data jGame15Data as json

    public method Reload() as logical

    public method SwapButtons() as logical

    public method SaveTopTable() as logical
    public method ClearTopTable() as logical

    public method SetGame15Player(cPlayer as character) as character

    public method SaveGame(cG15File as character) as logical
    public method RestoreGame(cG15File as character,bUpdateView as codeblock) as logical

    public method StartTime() as logical
    public method Time2NextDay(cTime as character,dDate as date) as array

    //View Interface
    public method BuildLBoxArray(aTWBrowseItems as array) as logical
    public method GetPlayerNameSize() as numeric
    public method SetGame15Data(cSection as character,cKey as character,xValue as variant) as logical
    public method GetGame15Data(cSection as character,cKey as character,xDefault as variant) as variant
    public method ShapeGetSize(cSection as character) as numeric
    public method ShapeGetIDAT(cSection as character,nShape as numeric) as numeric
    public method ShapeGetATValue(cSection as character,nShapeAT as numeric,nKeyAT as numeric) as variant

    public method ViewCanMoveButton(cShapeToolTip as character,cShapeProperties as character) as logical
    public method ViewSetTWBrowseItemsLine(oTWBrowse as object,aTWBrowseItems as array) as variant

endclass

method New() class Game15Controller
    self:lActive:=.F.
    if (self:CanExecute())
        self:oModel:=Game15Model():New()
        self:oView:=Game15View():New(self)
    endif
return(self)

method Activate() class Game15Controller
    local lActive as logical
    local oView:=self:oView
    local oModel:=self:oModel
    if ((self:CanExecute()).and.(!self:lActive))
        FWMsgRun(nil,{||lActive:=oModel:Activate()},"Wait..","Start of new game")
        self:lActive:=lActive
        if (self:lActive)
            self:jGame15Data:=oModel:jGame15Data
            self:lSetDeleted:=Set(_SET_DELETED,.T.)
            oView:Activate()
        endif
    endif
return(self:lActive)

method DeActivate() class Game15Controller
    if (self:lActive)
        if (valType(self:lSetDeleted)=="L")
            Set(_SET_DELETED,self:lSetDeleted)
        endif
        if (valType(self:oView)=="O")
            self:oView:DeActivate()
            FreeObj(@self:oView)
        endif
        if (valType(self:oModel)=="O")
            self:oModel:DeActivate()
            FreeObj(@self:oModel)
        endif
        self:lActive:=.F.
    endif
return(self:lActive)

method CanExecute() class Game15Controller
    self:lExecute:=FWIsInCallStack("GAME15.U_GAME15RUN")
return(self:lExecute)

method IsActive() class Game15Controller
return(self:lActive)

//Model Interface
method Reload() class Game15Controller
    local lReload as logical
    lReload:=self:IsActive()
    if (lReload)
        lReload:=self:oModel:Reload()
    endif
return(lReload)

method SwapButtons() class Game15Controller
    local lSwapButtons as logical
    lSwapButtons:=self:IsActive()
    if (lSwapButtons)
        lSwapButtons:=self:oModel:SwapButtons()
    endif
return(lSwapButtons)

method SaveTopTable() class Game15Controller
    local lSaveTopTable as logical
    lSaveTopTable:=self:IsActive()
    if (lSaveTopTable)
        lSaveTopTable:=self:oModel:SaveTopTable()
    endif
return(lSaveTopTable)

method ClearTopTable() class Game15Controller
    local lClearTopTable as logical
    lClearTopTable:=self:IsActive()
    if (lClearTopTable)
        lClearTopTable:=self:oModel:ClearTopTable()
    endif
return(lClearTopTable)

method SetGame15Player(cPlayer) class Game15Controller
    local cNewPlayer as character
    local lSetGame15Player as logical
    paramtype 1 var cPlayer as character
    lSetGame15Player:=self:IsActive()
    if (lSetGame15Player)
        cNewPlayer:=self:oModel:SetGame15Player(@cPlayer)
    endif
return(cNewPlayer)

method SaveGame(cG15File) class Game15Controller
    local lSaveGame as logical
    paramtype 1 var cG15File as character
    lSaveGame:=self:IsActive()
    if (lSaveGame)
        lSaveGame:=self:oModel:SaveGame(@cG15File)
    endif
return(lSaveGame)

method RestoreGame(cG15File,bUpdateView) class Game15Controller
    local lRestoreGame as logical
    paramtype 1 var cG15File as character
    paramtype 2 var bUpdateView as block
    lRestoreGame:=self:IsActive()
    if (lRestoreGame)
        lRestoreGame:=self:oModel:RestoreGame(@cG15File,@bUpdateView)
    endif
return(lRestoreGame)

method StartTime() class Game15Controller
    local lStartTime as logical
    lStartTime:=self:IsActive()
    if (lStartTime)
        lStartTime:=self:oModel:StartTime()
    endif
return(lStartTime)

method Time2NextDay(cTime,dDate) class Game15Controller
    local aTime2NextDay as array
    local lTime2NextDay as logical
    paramtype 1 var cTime as character
    paramtype 2 var dDate as date
    lTime2NextDay:=self:IsActive()
    if (lTime2NextDay)
        aTime2NextDay:=self:oModel:Time2NextDay(@cTime,@dDate)
    endif
return(aTime2NextDay)

//View Interface
method BuildLBoxArray(aTWBrowseItems) class Game15Controller
    local cG15Alias as character
    local lBuildLBoxArray as logical
    paramtype 1 var aTWBrowseItems as array
    lBuildLBoxArray:=self:IsActive()
    if (lBuildLBoxArray)
        cG15Alias:=self:jGame15Data["Game15_Table"]["G15_Alias"]
        lBuildLBoxArray:=BuildLBoxArray(@cG15Alias,@aTWBrowseItems)
    endif
return(lBuildLBoxArray)

method GetPlayerNameSize() class Game15Controller
    local cG15Alias as character
    local nPlayerNameSize as numeric
    local lGetPlayerNameSize as logical
    lGetPlayerNameSize:=self:IsActive()
    if (lGetPlayerNameSize)
        cG15Alias:=self:jGame15Data["Game15_Table"]["G15_Alias"]
        if (Select(cG15Alias)>0)
            nPlayerNameSize:=Len((cG15Alias)->G15_NAME)
        endif
    endif
return(nPlayerNameSize)

method SetGame15Data(cSection,cKey,xValue) class Game15Controller
    local lSetGame15Data as logical
    paramtype 1 var cSection as character
    paramtype 2 var cKey as character
    lSetGame15Data:=((self:IsActive()).and.(self:jGame15Data:HasProperty(cSection)))
    lSetGame15Data:=((lSetGame15Data).and.(self:jGame15Data[cSection]:HasProperty(cKey)))
    if (lSetGame15Data)
        self:jGame15Data[cSection][cKey]:=xValue
    endif
return(lSetGame15Data)

method GetGame15Data(cSection,cKey,xDefault) class Game15Controller
    local lGetGame15Data as logical
    local xValue as variant
    paramtype 1 var cSection as character
    paramtype 2 var cKey as character optional default ""
    lGetGame15Data:=((self:IsActive()).and.(self:jGame15Data:HasProperty(cSection)))
    if (lGetGame15Data)
        xValue:=self:jGame15Data[cSection]
        if (!Empty(cKey).and.(ValType(xValue)=="J"))
            lGetGame15Data:=xValue:HasProperty(cKey)
            if (lGetGame15Data)
                xValue:=xValue[cKey]
            else
                xValue:=xDefault
            endif
        endif
    else
        xValue:=xDefault
    endif
return(xValue)

method ShapeGetSize(cSection) class Game15Controller

    local aShapes as array
    local nShapeSize as numeric

    local lShapeGetSize as logical

    paramtype 1 var cSection as character

    lShapeGetSize:=self:IsActive()
    if (lShapeGetSize)
        aShapes:=self:GetGame15Data(cSection,"aShapes")
        nShapeSize:=Len(aShapes)
    endif

return(nShapeSize)

method ShapeGetIDAT(cSection,nShape) class Game15Controller

    local aShapes as array

    local lShapeGetIDAT as logical

    local nShapeAT as numeric

    paramtype 1 var cSection as character
    paramtype 2 var nShape as numeric

    lShapeGetIDAT:=self:IsActive()
    if (lShapeGetIDAT)
        aShapes:=self:jGame15Data[cSection]["aShapes"]
        nShapeAT:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)},nShape)
        if (nShapeAT==0)
            nShapeAT:=aScan(aShapes,{|aShape|(aShape[SHAPE_ID]==nShape)})
        endif
    endif

return(nShapeAT)

method ShapeGetATValue(cSection,nShapeAT,nKeyAT) class Game15Controller

    local aShapes as array

    local lShapeGetATValue as logical

    local xValue as variant

    paramtype 1 var cSection as character
    paramtype 2 var nShapeAT as numeric
    paramtype 3 var nKeyAT as numeric

    lShapeGetATValue:=self:IsActive()
    if (lShapeGetATValue)
        aShapes:=self:jGame15Data[cSection]["aShapes"]
        if ((nShapeAT>0).and.(nShapeAT<=Len(aShapes)))
            if ((nKeyAT>0).and.(nKeyAT<=Len(aShapes[nShapeAT])))
                xValue:=aShapes[nShapeAT][nKeyAT]
            endif
        endif
    endif

return(xValue)

method ViewCanMoveButton(cShapeToolTip,cShapeProperties) class Game15Controller

    local cToolTip as character

    local lButtonCanMove as logical

    paramtype 1 var cShapeToolTip as character
    paramtype 2 var cShapeProperties as character

    lButtonCanMove:=self:IsActive()
    if (lButtonCanMove)
        cToolTip:=Left(cShapeToolTip,3)
        lButtonCanMove:=("can-move=1"$cShapeProperties)
        lButtonCanMove:=((lButtonCanMove).and.(cToolTip>="b01".and.cToolTip<="b15"))
    endif

return(lButtonCanMove)

method ViewSetTWBrowseItemsLine(oTWBrowse,aTWBrowseItems) class Game15Controller

    local cG15Alias as character

    local lViewSetTWBrowseItemsLine as logical

    paramtype 1 var oTWBrowse as object class TWBROWSE
    paramtype 2 var aTWBrowseItems as array

    lViewSetTWBrowseItemsLine:=self:IsActive()

    if (lViewSetTWBrowseItemsLine)
        cG15Alias:=self:jGame15Data["Game15_Table"]["G15_Alias"]
        oTWBrowse:bLine:={||(cG15Alias)->(MsGoto(aTWBrowseItems[oTWBrowse:nAT][AT_R_E_C_N_O_])),;
                                {;
                                    aTWBrowseItems[oTWBrowse:nAT][AT_G15_TIME],;
                                    aTWBrowseItems[oTWBrowse:nAT][AT_G15_RESULT],;
                                    aTWBrowseItems[oTWBrowse:nAT][AT_G15_NAME];
                        };
                    }
    endif

return

static procedure BuildLBoxArray(cG15Alias as character,aTWBrowseItems as array)

    local cNickName:=(cG15Alias)->(IndexKey()) as character

    local nTWBrowseItems:=0 as numeric

    local lBuildOk as logical

    (cG15Alias)->(dbOrderNickName("G15_TIME"))

    aSize(aTWBrowseItems,0)

    (cG15Alias)->(dbGoTop())

    While (cG15Alias)->((!Eof()))

        nTWBrowseItems++
        aAdd(aTWBrowseItems,Array(AT_FIELDS))

        aTWBrowseItems[nTWBrowseItems][AT_G15_TIME ]:=(cG15Alias)->G15_TIME
        aTWBrowseItems[nTWBrowseItems][AT_G15_RESULT]:=(cG15Alias)->G15_RESULT
        aTWBrowseItems[nTWBrowseItems][AT_G15_NAME ]:=(cG15Alias)->G15_NAME
        aTWBrowseItems[nTWBrowseItems][AT_R_E_C_N_O_]:=(cG15Alias)->(Recno())

        (cG15Alias)->(dbSkip())

    End While

    lBuildOk:=(nTWBrowseItems>0)

    if (!lBuildOk)

        nTWBrowseItems++
        aAdd(aTWBrowseItems,Array(AT_FIELDS))
        aTWBrowseItems[nTWBrowseItems][AT_G15_TIME ]:=Space(Len((cG15Alias)->G15_TIME))
        aTWBrowseItems[nTWBrowseItems][AT_G15_RESULT]:=Space(10)
        aTWBrowseItems[nTWBrowseItems][AT_G15_NAME ]:=Space(Len((cG15Alias)->G15_NAME))
        aTWBrowseItems[nTWBrowseItems][AT_R_E_C_N_O_]:=0

    endif

    (cG15Alias)->(dbOrderNickName(cNickName))

return(lBuildOk)
