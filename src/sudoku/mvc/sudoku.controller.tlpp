/*
                 _         _                                   _                 _  _
 ___  _   _   __| |  ___  | | __ _   _      ___   ___   _ __  | |_  _ __   ___  | || |  ___  _ __
/ __|| | | | / _` | / _ \ | |/ /| | | |    / __| / _ \ | '_ \ | __|| '__| / _ \ | || | / _ \| '__|
\__ \| |_| || (_| || (_) ||   < | |_| | _ | (__ | (_) || | | || |_ | |   | (_) || || ||  __/| |
|___/ \__,_| \__,_| \___/ |_|\_\ \__,_|(_) \___| \___/ |_| |_| \__||_|    \___/ |_||_| \___||_|

*/

#include "totvs.ch"
#include "sudoku.th"
#include "parmtype.ch"
#include "tlpp-core.th"

namespace sudoku
using namespace sudoku
using namespace naldodj.games

class SudokuController

    private data jSudokuData as json

    private data lExecute as logical
    private data lActive as logical
    private data lSetDeleted as logical
    private data lSudokuKeepLevelOption as logical

    private data nSudokuLastLevel as numeric

    private data oView as object
    private data oModel as object

    public method New() as object
    public method Activate(lAskSudokuLevel as logical,lActivateView as logical) as logical
    public method DeActivate() as logical
    public method CanExecute() as logical
    public method IsActive() as logical

    public method SudokuData() as json
    public method SudokuDataSet(cKey as character,xValue as variant) as logical
    public method SudokuDataGet(cKey as character,xDefault as variant) as variant

    public method SudokuLevel(lAskSudokuLevel as logical) as numeric
    public method SudokuLastLevel(nSudokuLastLevel as numeric) as numeric
    public method SudokuKeepLevelOption(lSudokuKeepLevelOption as logical) as logical

    public method RunTest(lHTMLTable as logical,lThemeIsDark as logical) as character

    //Model Interface
    public method SudokuBuildSringBoard(aSudoku as array,lHTMLTable as logical,lThemeIsDark as logical) as character

    //View Interface
    public method BuildSudokuBoard(oFont as object) as array
    public method SudokuSolveBoard(aSudokuBoardView as array,lSolveAllNums as logical) as logical
    public method SudokuCheckBoard(aSudokuBoardView as array,lSolveAllNums as logical) as logical

endclass

method New() class SudokuController
    self:lActive:=.F.
    if (self:CanExecute())
        self:oModel:=SudokuModel():New()
        self:oView:=SudokuView():New(self)
    endif
return(self)

method Activate(lAskSudokuLevel,lActivateView) class SudokuController
    local lActive as logical
    local oView:=self:oView
    local oModel:=self:oModel
    if ((self:CanExecute()).and.(!self:lActive))
        paramtype 1 var lAskSudokuLevel as logical optional default .T.
        self:SudokuLevel(lAskSudokuLevel)
        FWMsgRun(nil,{||lActive:=oModel:Activate()},"Wait..","Start of new game")
        self:lActive:=lActive
        self:SudokuData()
        paramtype 2 var lActivateView as logical optional default .T.
        if ((self:lActive).and.(lActivateView))
            self:jSudokuData["aSudokuBoard"]:=oModel:SudokuRemoveNumbers(self:jSudokuData["aSudoku"],self:jSudokuData["nSudokuLevel"])
            oView:Activate()
        endif
    endif
return(self:lActive)

method DeActivate() class SudokuController
    if (self:lActive)
        if (valType(self:lSetDeleted)=="L")
            Set(_SET_DELETED,self:lSetDeleted)
        endif
        if (valType(self:oView)=="O")
            self:oView:DeActivate()
            MsObjects():FreeObjects(@self:oView)
        endif
        if (valType(self:oModel)=="O")
            self:oModel:DeActivate()
            MsObjects():FreeObjects(@self:oModel)
        endif
        self:lActive:=.F.
    endif
return(self:lActive)

method CanExecute() class SudokuController
    self:lExecute:=(FWIsInCallStack("SUDOKU.U_SUDOKURUN").or.FWIsInCallStack("SUDOKU.U_SUDOKURUNTESTS"))
return(self:lExecute)

method IsActive() class SudokuController
return(self:lActive)

method SudokuData() class SudokuController
    local lSudokuData as logical
    lSudokuData:=(self:CanExecute().and.self:IsActive())
    if (lSudokuData)
        self:jSudokuData:=self:oModel:SudokuData()
    endif
return(self:jSudokuData)

method SudokuDataSet(cKey,xValue) class SudokuController
    local lSudokuDataSet as logical
    lSudokuDataSet:=(self:CanExecute().and.self:IsActive())
    if (lSudokuDataSet)
        paramtype 1 var cKey as character
        self:jSudokuData[cKey]:=xValue
        self:oModel:SudokuDataSet(cKey,xValue)
    endif
return(lSudokuDataSet)

method SudokuDataGet(cKey,xDefault) class SudokuController
    local lSudokuDataGet as logical
    local xValue as variant
    lSudokuDataGet:=(self:CanExecute().and.self:IsActive())
    if (lSudokuDataGet)
        paramtype 1 var cKey as character
        if (self:jSudokuData:HasProperty(cKey))
            xValue:=self:jSudokuData[cKey]
        else
            xValue:=xDefault
        endif

    endif
return(xValue)

method SudokuLevel(lAskSudokuLevel) class SudokuController

    local aLevels as array
    local nLevel as numeric

    local lSudokuKeepLevelOption  as logical

    if (self:CanExecute())
        lSudokuKeepLevelOption:=self:SudokuKeepLevelOption()
        paramtype 1 var lAskSudokuLevel as logical optional default lSudokuKeepLevelOption
        if (lAskSudokuLevel)
            nLevel:=self:oModel:SudokuLevel()
            aLevels:=self:oModel:SudokuLevels()
            aEval(@aLevels,{|cStr,nAT|aLevels[nAT]:=OemToAnsi(ctools():WebAccentuationToAscii(cStr))})
            nLevel:=self:oView:SudokuLevel(aLevels,lAskSudokuLevel,@lSudokuKeepLevelOption,self:SudokuLastLevel())
            self:SudokuKeepLevelOption(lSudokuKeepLevelOption)
            if (lSudokuKeepLevelOption)
                self:SudokuLastLevel(nLevel)
            endif
            self:oModel:SudokuLevel(nLevel)
        else
            nLevel:=self:SudokuLastLevel()
            self:oModel:SudokuLevel(nLevel)
        endif
    endif

return(nLevel)

method SudokuLastLevel(nSudokuLastLevel) class SudokuController
    if (self:CanExecute())
        paramtype 1 var nSudokuLastLevel as numeric optional default self:SudokuDataGet("nSudokuLastLevel",self:nSudokuLastLevel)
        self:nSudokuLastLevel:=nSudokuLastLevel
        self:SudokuDataSet("nSudokuLastLevel",nSudokuLastLevel)
    endif
return(nSudokuLastLevel)

method SudokuKeepLevelOption(lSudokuKeepLevelOption) class SudokuController
    if (self:CanExecute())
        paramtype 1 var lSudokuKeepLevelOption as logical optional default self:SudokuDataGet("lSudokuKeepLevelOption",self:lSudokuKeepLevelOption)
        self:lSudokuKeepLevelOption:=lSudokuKeepLevelOption
        self:SudokuDataSet("lSudokuKeepLevelOption",lSudokuKeepLevelOption)
    endif
return(lSudokuKeepLevelOption)

method RunTest(lHTMLTable,lThemeIsDark) class SudokuController
    local cSudokuBoard as character
    if (self:Activate(.T.,.F.))
        paramtype 1 var lHTMLTable as logical optional default .T.
        paramtype 2 var lThemeIsDark as logical optional default .F.
        cSudokuBoard:=self:SudokuBuildSringBoard(self:jSudokuData["aSudoku"],lHTMLTable,lThemeIsDark)
    endif
return(cSudokuBoard)

method SudokuBuildSringBoard(aSudoku,lHTMLTable,lThemeIsDark) class SudokuController
    local cSudokuBoard as character
    if (self:IsActive())
        paramtype 1 var aSudoku as array
        paramtype 2 var lHTMLTable as logical optional default .T.
        paramtype 3 var lThemeIsDark as logical optional default .F.
        if (!Empty(aSudoku))
            cSudokuBoard:=self:oModel:SudokuBuildSringBoard(self:jSudokuData["aSudoku"],lHTMLTable,lThemeIsDark)
        endif
    endif
return(cSudokuBoard)

method BuildSudokuBoard(oFont) class SudokuController

    local aSudokuSolved as array
    local aSudokuBoardView as array

    local bGetVar as codeblock
    local bGetSet as codeblock

    local cSudokuGetNum as character

    local lChange as logical
    local lThemeIsDark as logical

    local nRow as numeric
    local nCol as numeric

    local nWidth as numeric
    local nHeight as numeric

    local nItem as numeric
    local nItens as numeric
    local nLoop as numeric
    local nLoops as numeric
    local nCntRow as numeric
    local nCntCol as numeric
    local nColIndex as numeric

    local oView as object
    local oController as object

    paramtype 1 var oFont as object /*class TFONT*/

    oController:=self
    oView:=oController:oView

    oDlg:=oView:oDlg
    aSudokuBoard:=oController:SudokuData()["aSudokuBoard"]

    nRow:=20

    nWidth:=CalcFieldSize("C",1,0,"9","9",oFont)
    nHeight:=nWidth

    bGetSet:={||&("{|u|if(PCount()==0,aSudokuBoardView["+__NToS(nLoop)+","+__NToS(nItem)+","+__NToS(SUDOKU_VAR)+"],aSudokuBoardView["+__NToS(nLoop)+","+__NToS(nItem)+","+__NToS(SUDOKU_VAR)+"]:=u)}")}
    bGetVar:={||"aSudokuBoardView["+__NToS(nLoop)+","+__NToS(nItem)+","+__NToS(SUDOKU_VAR)+"]"}

    lThemeIsDark:=WebApp():ThemeIsDark()

    aSudokuSolved:=aClone(aSudokuBoard)

    aSudokuBoardView:=Array(9)
    aEval(aSudokuBoardView,{|,nAT as numeric|aSudokuBoardView[nAT]:=aClone(Array(9,SUDOKU_ELEM))})

    nLoops:=Len(aSudokuBoardView)
    nCntRow:=0
    for nLoop:=1 to nLoops
        nItens:=Len(aSudokuBoardView[nLoop])
        nCol:=15
        nCntCol:=0
        nColIndex:=0
        for nItem:=1 to nItens
            nSudokuGetNum:=aSudokuSolved[nLoop][++nColIndex]
            lChange:=(nSudokuGetNum==0)
            cSudokuGetNum:=__NToS(nSudokuGetNum)
            if (lChange)
                cSudokuGetNum:=" "
            endif
            aSudokuBoardView[nLoop][nItem][SUDOKU_VAR]:=cSudokuGetNum
            aSudokuBoardView[nLoop][nItem][SUDOKU_OBJ]:=TGet():New(;
                                                                nRow,;//01:<nRow>
                                                                nCol,;//02:<nCol>
                                                                Eval(bGetSet),;//03:bSETGET(<uVar>)
                                                                oDlg,;//04:[<oWnd>]
                                                                nWidth,;//05:<nWidth>
                                                                nHeight,;//06:<nHeight>
                                                                "9",;//07:<cPict>
                                                                NIL,;//08:<{ValidFunc}>
                                                                if(lChange,NIL,if(lThemeIsDark,CLR_WHITE,CLR_WHITE)),;//09:<nClrFore>
                                                                if(lChange,NIL,if(lThemeIsDark,CLR_BLUE,CLR_BLUE)),;//10:<nClrBack>
                                                                oFont,;//11:<oFont>
                                                                .T.,;//12:<.design.>
                                                                NIL,;//13:<oCursor>
                                                                .T.,;//14:<.pixel.>
                                                                NIL,;//15:<cMsg>
                                                                .F.,;//16:<.update.>
                                                                &("{||"+AllToChar(lChange)+"}"),;//17:<{uWhen}>
                                                                .T.,;//18:<.lCenter.>
                                                                .F.,;//19:<.lRight.>
                                                                NIL,;//20:[\{|nKey, nFlags, Self|<uChange>\}]
                                                                (!lChange),;//21:<.readonly.>
                                                                .F.,;//22:<.pass.>
                                                                NIL,;//23:<cF3>
                                                                Eval(bGetVar),;//24:<(uVar)>
                                                                NIL,;//25:?
                                                                NIL,;//26:[<.lNoBorder.>]
                                                                NIL,;//27:[<nHelpId>]
                                                                NIL;//28:[<.lHasButton.>]
            )
            ++nCntCol
            if (;
                    (nCntCol==3);
                    .or.;
                    (nCntCol==6);
            )
                if (nCntCol==3)
                    nCol+=40
                else
                    nCol+=45
                endif
            else
                nCol+=28
            endif
        next nItem
        ++nCntRow
        if (;
                (nCntRow==3);
                .or.;
                (nCntRow==6);
            )
            if (nCntRow==3)
                nRow+=40
            else
                nRow+=45
            endif
        else
            nRow+=26
        endif
    next nLoop

    MsObjects():FreeObjects(@aSudokuSolved)

return(aSudokuBoardView)

method SudokuSolveBoard(aSudokuBoardView,lSolveAllNums) class SudokuController

    local aSudokuSolved as array

    local cNumber as character

    local nLoop as numeric
    local nLoops as numeric
    local nChkNum as numeric
    local nNumChk as numeric

    local lSudokuSolvedBoard:=.T. as logical

    lSudokuSolvedBoard:=self:IsActive()
    if (lSudokuSolvedBoard)

        paramtype 1 var aSudokuBoardView as array
        paramtype 2 var lSolveAllNums as logical optional default .F.

        aSudokuSolved:=self:SudokuDataGet("aSudoku",{})

        nLoops:=Len(aSudokuSolved)
        for nLoop:=1 to nLoops
            nNumChk:=Len(aSudokuSolved[nLoop])
            for nChkNum:=1 to nNumChk
                if (!aSudokuBoardView[nLoop][nChkNum][1]:lReadOnly)
                    cNumber:=__NToS(aSudokuSolved[nLoop][nChkNum])
                    if (lSolveAllNums)
                        if (aSudokuBoardView[nLoop][nChkNum][2]!=cNumber)
                            aSudokuBoardView[nLoop][nChkNum][2]:=cNumber
                        endif
                    else
                        if (Empty(aSudokuBoardView[nLoop][nChkNum][2]))
                            aSudokuBoardView[nLoop][nChkNum][2]:=cNumber
                        endif
                    endif
                endif
            next nChkNum
        next nLoop

    endif

return(lSudokuSolvedBoard)

method SudokuCheckBoard(aSudokuBoardView,lSolveAllNums,cMsgTitle,cMsgDetail) class SudokuController

    local aChkOk as array

    local cCRLF:=CRLF as character
    local cNumber as character

    local lSudokuCheckBoard:=.F. as logical

    local nLoop as numeric
    local nLoops as numeric
    local nChkNum as numeric
    local nNumChk as numeric

    lSudokuCheckBoard:=self:IsActive()
    if (lSudokuCheckBoard)

        paramtype 1 var aSudokuBoardView as array
        paramtype 2 var lSolveAllNums as logical optional default .F.
        paramtype 3 var cMsgTitle as character optional default ""
        paramtype 4 var cMsgDetail as character optional default ""

        aChkOk:=Array(0)
        aSudokuSolved:=self:SudokuDataGet("aSudoku",{})

        nLoops:=Len(aSudokuSolved)
        for nLoop:=1 to nLoops
            nNumChk:=Len(aSudokuSolved[nLoop])
            for nChkNum:=1 to nNumChk
                if (!aSudokuBoardView[nLoop][nChkNum][1]:lReadOnly)
                    cNumber:=__NToS(aSudokuSolved[nLoop][nChkNum])
                    if (aSudokuBoardView[nLoop][nChkNum][2]==cNumber)
                        aSudokuBoardView[nLoop][nChkNum][1]:lReadOnly:=.T.
                        aSudokuBoardView[nLoop][nChkNum][1]:nClrPane:=CLR_GREEN
                        aSudokuBoardView[nLoop][nChkNum][1]:nClrText:=CLR_WHITE
                        aAdd(aChkOk,{.T.,nLoop,nChkNum})
                    else
                        aSudokuBoardView[nLoop][nChkNum][1]:nClrPane:=CLR_RED
                        aSudokuBoardView[nLoop][nChkNum][1]:nClrText:=CLR_WHITE
                        aAdd(aChkOk,{.F.,nLoop,nChkNum})
                    endif
                endif
            next nChkNum
        next nLoop

        begin sequence

            if (!lSolveAllNums)

                if ((nLoop:=aScan(aChkOk,{|aOk|!(aOk[1])}))>0)
                    cMsgDetail:="Existem Informa&ccedil;&otilde;es inconsistentes!"
                    cMsgDetail+=cCRLF
                    cMsgDetail+="Corrija os n&uacute;meros dos quadrados pintados de vermelho!"
                    cMsgTitle:="Inconsist&ecirc;ncia"
                    break
                endif

                lSudokuCheckBoard:=.T.

                cMsgDetail:="Parab&eacute;ns, voc&ecirc; conclui a partida com sucesso!"
                cMsgDetail+=cCRLF
                cMsgDetail+=cCRLF
                cMsgDetail+="Tempo: "//+GetGlbValue("cSudokuTime")
                cMsgTitle:="OK"

            else

                cMsgDetail:="Que Pena. voce desistiu do Jogo!"
                cMsgDetail+=cCRLF
                cMsgDetail+=cCRLF
                cMsgDetail+="Tempo: "//+GetGlbValue("cSudokuTime")
                cMsgTitle:="Desistente"

            endif

        end sequence

        MsObjects():FreeObjects(@aChkOk)

    endif

return(lSudokuCheckBoard)
